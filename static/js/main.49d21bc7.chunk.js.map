{"version":3,"sources":["Home.js","games/math-battle/MathBattle.js","App.js","reportWebVitals.js","index.js"],"names":["Home","style","backgroundImage","backgroundRepeat","backgroundSize","height","opacity","display","width","margin","fontSize","borderColor","borderRadius","textAlign","backgroundColor","to","textDecoration","color","MathBattle","useState","level","setLevel","Math","ceil","random","num1","setNum1","num2","setNum2","operator","setOperator","score","setScore","bgColor","setbgColor","questionColor","setQuestionColor","gameOver","setGameOver","timer","setTimer","inputRef","useRef","colors","useEffect","timerId","setInterval","clearInterval","getRandomOperator","setQuestion","handleSubmit","event","a","preventDefault","userAnswer","parseInt","current","value","isCorrect","focus","className","marginBottom","marginLeft","marginRight","justifyContent","paddingTop","float","fontVariant","marginTop","onSubmit","type","ref","disabled","placeholder","fontFamily","border","flexDirection","padding","fontWeight","onClick","val","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEe,SAASA,IACtB,OACF,qBAAKC,MACH,CACGC,gBAAiB,4BACjBC,iBAAkB,QAClBC,eAAgB,OAChBC,OAAQ,QACRC,QAAS,MACTC,QAAS,QAPd,SAWE,wBACEN,MACE,CACEI,OAAQ,OACRG,MAAO,QACPC,OAAQ,OACRC,SAAU,OACVC,YAAa,0BACbC,aAAc,OACdC,UAAW,SACXC,gBAAiB,4BAVvB,SAcC,cAAC,IAAD,CAAMC,GAAG,eAAed,MACtB,CAACe,eAAgB,OAAQC,MAAO,UADlC,sB,yCC1BY,SAASC,IAAc,IAAD,EACTC,mBAAS,GADA,mBAC5BC,EAD4B,KACrBC,EADqB,OAEXF,mBAASG,KAAKC,KAAKD,KAAKE,SAAWJ,EAAQ,EAAI,IAFpC,mBAE5BK,EAF4B,KAEtBC,EAFsB,OAGXP,mBAASG,KAAKC,KAAKD,KAAKE,SAAWJ,EAAQ,EAAI,IAHpC,mBAG5BO,EAH4B,KAGtBC,EAHsB,OAIHT,mBAAS,KAJN,mBAI5BU,EAJ4B,KAIlBC,EAJkB,OAKTX,mBAAS,GALA,mBAK5BY,EAL4B,KAKrBC,EALqB,OAMLb,mBAAS,WANJ,mBAM5Bc,EAN4B,KAMnBC,EANmB,OAOOf,mBAAS,2BAPhB,mBAO5BgB,EAP4B,KAObC,EAPa,OAQHjB,oBAAS,GARN,mBAQ5BkB,EAR4B,KAQlBC,EARkB,OASTnB,mBAAS,IATA,mBAS5BoB,EAT4B,KASrBC,EATqB,KAU7BC,EAAWC,iBAAO,MAClBC,EAAS,CACd,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGDC,qBAAU,WACR,IAAMC,EAAUC,aAAY,WACtBP,EAAQ,GACVL,EAAWS,EAAOJ,IAClBH,EAAiB,2BACjBI,EAASD,EAAQ,IAEjBD,GAAY,KAEb,KACH,OAAO,WACLS,cAAcF,OAIlB,IAAMG,EAAoB,WAExB,OADY1B,KAAKC,KAAqB,EAAhBD,KAAKE,WAEzB,KAAK,EAAGM,EAAY,KACpB,MACA,KAAK,EAAGA,EAAY,KACpB,MACA,KAAK,EAAGA,EAAY,KACpB,MACA,KAAK,EAAGA,EAAY,KACpB,MACA,QAASA,EAAY,OAInBmB,EAAc,WAClBvB,EAAQJ,KAAKC,KAAKD,KAAKE,SAAWJ,EAAQ,EAAI,KAC9CQ,EAAQN,KAAKC,KAAKD,KAAKE,SAAWJ,EAAQ,EAAI,KAc1C8B,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sDACnBD,EAAME,iBACAC,EAAaC,SAASd,EAASe,QAAQC,OACzCC,GAAY,EAHG,KAIZ7B,EAJY,OAKb,MALa,OAWd,MAXc,OAiBZ,MAjBY,QAuBZ,MAvBY,+BAMZJ,EAAOE,IAAS2B,IAClBI,GAAY,GAPE,mCAYbjC,EAAOE,IAAS2B,IAClBI,GAAY,GAbG,oCAkBXH,SAAS9B,EAAOE,KAAU2B,IAC5BI,GAAY,GAnBC,oCAwBXjC,EAAOE,IAAS2B,IAClBI,GAAY,GAzBC,+DA+BnBjB,EAASe,QAAQG,QAEbD,GACF1B,EAASD,EAAQ,GACjBkB,IACAD,IACAd,EAAW,yBACXM,EAAS,IACLT,GAAS,GAAKA,EAAQ,IAAM,GAC9BV,EAASD,EAAQ,KAGfW,EAAQ,GACVC,EAASD,EAAQ,GAEfwB,SAASxB,IAAU,IACrBO,GAAY,GACZE,EAAS,IAEXnB,EAASD,EAAQ,GACjBc,EAAW,wBACXE,EAAiB,wBAGnBK,EAASe,QAAQC,MAAQ,IAvDN,4CAAH,sDA0DlB,OACE,sBAAKG,UAAU,MAAM3D,MAAO,CAC1BM,QAAS,QACTO,gBAAiBmB,EACjB5B,OAAQ,SAHV,UAKE,sBAAKJ,MAAO,CACV4D,aAAc,OACdC,WAAY,OACZC,YAAa,OACbxD,QAAS,OACTyD,eAAgB,gBAChBC,WAAY,QANd,UAQE,uBAAML,UAAU,QAAQ3D,MACtB,CACEiE,MAAO,OACPjD,MAAO,mBACPP,SAAU,OACVyD,YAAa,cALjB,oBAOUpC,KACV,uBAAM6B,UAAU,QAAQ3D,MACtB,CACEiE,MAAO,QACPjD,MAAO,qBACPP,SAAU,QAJd,oBAMUU,KACV,uBAAMwC,UAAU,QAAQ3D,MACtB,CACEiE,MAAO,QACPjD,MAAO,OACPP,SAAU,QAJd,wBAMc6B,QAEhB,qBAAIqB,UAAU,aACZ3D,MACE,CACEmE,UAAW,OACXnD,MAAOkB,EACPzB,SAAU,QACVG,UAAW,SACXmD,eAAgB,UAPtB,UASGvC,EATH,IASUI,EATV,IASqBF,KACrB,sBAAM0C,SAAUnB,EAAhB,SACE,uBAAOoB,KAAK,OAAOC,IAAK9B,EAAU+B,SAAUnC,EAAUoC,YAAY,qBAEnEpC,GAAY,oBACXpC,MACE,CACEgB,MAAO,SACPP,SAAU,OACVG,UAAW,SACX6D,WAAY,sBANL,2BAUZrC,GACD,qBACApC,MACE,CACEgB,MAAO,SACPP,SAAU,OACVG,UAAW,SACX6D,WAAY,sBANhB,yBAUiB3C,KAEhBM,GAAY,wBACXpC,MACE,CACEO,MAAO,QACPH,OAAQ,OACRS,gBAAiB,uBACjB6D,OAAQ,OACRX,eAAgB,SAChBY,cAAe,SACfrE,QAAS,QACTE,OAAQ,OACRI,UAAW,SACXH,SAAU,OACVmE,QAAS,OACT5D,MAAO,QACP6D,WAAY,OACZJ,WAAY,sBAGhBK,QAjKY,WAChBvC,EAAS,IACTR,EAAS,GACTI,EAAiB,2BACjBE,GAAY,GACZJ,EAAW,WACXb,EAAS,GACToB,EAASe,QAAQwB,IAAM,GACvB/B,KAsIe,wBCzMJ,SAASgC,IACtB,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAACnF,EAAD,MACzB,cAAC,IAAD,CAAOkF,KAAK,eAAeC,QAAS,cAACjE,EAAD,WCT5C,IAYekE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACd,EAAD,MAEFe,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49d21bc7.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n<div style={\n  {\n     backgroundImage: \"url(/assets/bg-asset.jpg)\",\n     backgroundRepeat: \"round\",\n     backgroundSize: \"100%\",\n     height: \"100vh\",\n     opacity: \"0.7\",\n     display: \"grid\"\n  }\n}>\n\n  <button \n    style={\n      {\n        height: \"70px\",\n        width: \"500px\",\n        margin: \"auto\",\n        fontSize: \"50px\",\n        borderColor: \"rgba(0, 167 , 255, 0.8)\",\n        borderRadius: \"2rem\",\n        textAlign: \"center\",\n        backgroundColor: \"rgba(138, 230, 150, 0.8)\"\n      }\n  }\n  >\n   <Link to=\"/math-battle\" style={\n     {textDecoration: \"none\", color: \"tomato\",}}\n     >Play</Link>\n  </button>\n</div>\n  )\n}\n","import {useState, useRef, useEffect} from 'react';\nimport './MathBattle.module.css';\n\nexport default function MathBattle() {\n  const [level, setLevel] = useState(1);\n  const [num1, setNum1] = useState(Math.ceil(Math.random() * level * 5 + 1));\n  const [num2, setNum2] = useState(Math.ceil(Math.random() * level * 5 + 1));\n  const [operator, setOperator] = useState(\"+\");\n  const [score, setScore] = useState(0);\n  const [bgColor, setbgColor] = useState(\"#b1edaf\");\n  const [questionColor, setQuestionColor] = useState(\"rgba(12, 120, 124, 1.0)\");\n  const [gameOver, setGameOver] = useState(false);\n  const [timer, setTimer] = useState(10);\n  const inputRef = useRef(null);\n  const colors = [\n   \"#fdbebe\",\n   \"#ffc1b5\",\n   \"#ffc5ac\",\n   \"#fbcaa5\",\n   \"#f4cfa0\",\n   \"#ebd59e\",\n   \"#dfdc9f\",\n   \"#d2e2a4\",\n   \"#c2e8ad\",\n   \"#b1edb9\",\n   \"#b1edbf\",\n  ]\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      if (timer > 0) {\n        setbgColor(colors[timer])\n        setQuestionColor(\"rgba(12, 120, 124, 1.0)\"); \n        setTimer(timer - 1);\n      } else {\n        setGameOver(true);\n      }\n    }, 1000)\n    return () => {\n      clearInterval(timerId);\n    }\n  });\n\n  const getRandomOperator = () => {\n    const val = Math.ceil(Math.random() * 4);\n    switch(val) {\n      case 1: setOperator(\"+\");\n      break;\n      case 2: setOperator(\"-\");\n      break;\n      case 3: setOperator(\"/\");\n      break;\n      case 4: setOperator(\"*\");\n      break;\n      default: setOperator(\"+\");\n    }\n  }\n\n  const setQuestion = () => {\n    setNum1(Math.ceil(Math.random() * level * 5 + 10));\n    setNum2(Math.ceil(Math.random() * level * 5 + 1));\n  }\n\n  const resetGame = () => {\n    setTimer(10);\n    setScore(0);\n    setQuestionColor(\"rgba(12, 120, 124, 1.0)\");      \n    setGameOver(false);\n    setbgColor(\"#b1edaf\");\n    setLevel(1);\n    inputRef.current.val = \"\";\n    setQuestion();\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    const userAnswer = parseInt(inputRef.current.value);\n    let isCorrect = false;\n    switch(operator) {\n     case \"+\":\n       if (num1 + num2 === userAnswer) {\n         isCorrect = true;\n       }\n       break;\n\n    case \"-\":\n      if (num1 - num2 === userAnswer) {\n        isCorrect = true;\n      }\n      break;\n    \n      case \"/\":\n        if (parseInt(num1 / num2) === userAnswer) {\n          isCorrect = true;\n        }\n      break;\n\n      case \"*\":\n        if (num1 * num2 === userAnswer) {\n          isCorrect = true;\n        }\n        break;\n      default:\n        return;\n    }\n    inputRef.current.focus();\n\n    if (isCorrect) {\n      setScore(score + 1);\n      setQuestion();\n      getRandomOperator();\n      setbgColor(\"rgba(0, 160, 00, 0.3)\")\n      setTimer(10);\n      if (score >= 5 && score % 3 === 0) {\n        setLevel(level + 1);\n      }\n    } else {\n      if (score > 0) {\n        setScore(score - 1);\n      }\n      if (parseInt(score) <= 1) {\n        setGameOver(true);\n        setTimer(0);\n      }\n      setLevel(level + 2);\n      setbgColor(\"rgba(160, 0, 0, 0.3)\")\n      setQuestionColor(\"rgba(255, 0,0, 0.7)\")\n    }\n\n    inputRef.current.value = \" \"\n  }\n\n  return (\n    <div className=\"App\" style={{\n      display: 'block',\n      backgroundColor: bgColor,\n      height: \"100vh\",\n    }}>\n      <div style={{\n        marginBottom: \"3rem\",\n        marginLeft: \"3rem\",\n        marginRight: \"3rem\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        paddingTop: \"5rem\",\n      }}>\n        <span className=\"score\" style={\n          {\n            float: 'left',\n            color: \"rgb(72, 146, 54)\",\n            fontSize: \"50px\",\n            fontVariant: \"small-caps\",\n          }\n        }>Score: {score}</span>\n        <span className=\"level\" style={\n          {\n            float: 'right',\n            color: \"rgb(230, 113, 113)\",\n            fontSize: \"50px\",\n          }\n        }>Level: {level}</span>\n        <span className=\"timer\" style={\n          {\n            float: 'right',\n            color: \"#000\",\n            fontSize: \"50px\",\n          }\n        }>Time Left: {timer}</span>\n      </div>\n      <h1 className=\"expression\"\n        style={\n          {\n            marginTop: \"8rem\",\n            color: questionColor,\n            fontSize: \"100px\",\n            textAlign: \"center\",\n            justifyContent: \"center\",\n          }\n      }>{num1} {operator} {num2}</h1>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" ref={inputRef} disabled={gameOver} placeholder=\"Type Answer...\"></input>\n      </form>\n      {gameOver && <h1\n        style={\n          {\n            color: \"yellow\",\n            fontSize: \"40px\",\n            textAlign: \"center\",\n            fontFamily: \"'Satisfy', cursive\",\n          }\n        }\n      >X Game Over X</h1> }\n      {gameOver && \n      <h2 \n      style={\n        {\n          color: \"yellow\",\n          fontSize: \"40px\",\n          textAlign: \"center\",\n          fontFamily: \"'Satisfy', cursive\",\n        }\n      }\n      >\n          Your Score: {score}\n      </h2>}\n      {gameOver && <button\n        style={\n          {\n            width: \"300px\",\n            height: \"80px\",\n            backgroundColor: \"rgba(0,200, 200,0.5)\",\n            border: \"none\",\n            justifyContent: \"center\",\n            flexDirection: \"column\",\n            display: \"block\",\n            margin: \"auto\",\n            textAlign: \"center\",\n            fontSize: \"60px\",\n            padding: \"4rem\",\n            color: \"white\",\n            fontWeight: \"bold\",\n            fontFamily: \"'Satisfy', cursive\",\n          }\n        }\n        onClick={resetGame}\n      >Restart</button>}\n    </div>\n  );\n}\n","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Home from './Home'\nimport MathBattle from './games/math-battle/MathBattle'\n\nexport default function App() {\n  return(\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />}></Route>\n        <Route path=\"/math-battle\" element={<MathBattle />}></Route>\n      </Routes>\n    </BrowserRouter>\n\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}